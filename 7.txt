//·Day 7 webpack
// 1.简述webpack模块打包原理
// 使用webpack：
// 3.全局安装webpack，为了使用webpack命令
// 4.全局安装webpack-cli
// 5.新建配置文件，默认的文件名webpack.config.js,
// 如果不是默认的话，执行webpack --config webpackdev.js
// 6.webpack的四大核心概念：
// (1):mode://设置环境   "production"(生产环境) 'development'()开发环境
// 在配置文件里面设置 mode：“production”
// 在package.json里面设置
// 1:入口(entry):“跟入口文件的路径”
// 类型：字符串，数组，对象，前两种是单入口文件的时候使用，最后一个是多入口的时候用
// 2:出口(output):"默认是dist文件名webpack.config.js"
// output:{
// path:编译之后的文件路径
// filename:编译之后的文件名称
// 多入口的时候，出口[hash]-[name].js
// }
// 3:加载器(loader)
// 只解析非js文件
// module:
// 4:插件(plugins)
//传统的模块打包工具（module bundlers）最终将所有的模块编译生成一个庞大的bundle.js文件。但是在真实的app里边，“bundle.js”文件可能有10M到15M之大可能会导致应用一直处于加载中状态。因此Webpack使用许多特性来分割代码然后生成多个“bundle”文件，而且异步加载部分代码以实现按需加载。
// 文件管理
// 每个文件都是一个资源，可以用require / import导入js
// 每个入口文件会把自己所依赖(即require)的资源全部打包在一起，一个资源多次引用的话，只会打包一份
// 对于多个入口的情况，其实就是分别独立的执行单个入口情况，每个入口文件不相干(可用CommonsChunkPlugin优化)
// 打包原理
// 把所有依赖打包成一个bundle.js文件，通过代码分割成单元片段并按需加载。

//2.简述webpack loader
//webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，
//或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。

//4.开发和生产环境的构建配置差异，如何优化webpack构建速度

//在项目开发的时候，我们通常会将程序分为开发环境和生产环境（或者叫线上环境），开发环境通常指的是我们正在开发的这个阶段所需要的一些环境配置，也就是方便我们开发人员调试开发的一种环境；生产环境通常指的是我们将程序开发完成经过测试之后无明显异常准备发布上线的环境，也可以理解为用户可以正常使用的就是生产环境；

// 当然开发环境和生产环境在配置方面的需求是不一样的，但是有共同点：

// 开发环境的需求：

// 模块热更新  （本地开启服务，实时更新）
// sourceMap(方便打包调试)
// 接口代理(配置proxyTable解决开发环境中的跨域问题)

// 代码规范检查(代码规范检查工具)

// 生产环境的需求：

// 提取公共代码
// 压缩混淆(压缩混淆代码，清除代码空格，注释等信息使其变得难以阅读)
// 文件压缩 / base64编码(压缩代码，减少线上环境文件包的大小)
// 去除无用的代码



// 开发环境和生产环境的共同需求：

// 同样的入口
// 同样的代码处理(loader处理)
// 同样的解析配置
//(2)优化webpack构建速度
// webpack在启动时会从配置的Entry出发，解析出文件中的导入语句，再递归解析。
// 对于导入语句Webpack会做出以下操作：

// 根据导入语句寻找对应的要导入的文件；
// 在根据要导入的文件后缀，使用配置中的Loader去处理文件（如使用ES6需要使用babel - loader处理）
// 针对这两点可以优化查找途径
// 优化Loader配置

// Loader处理文件的转换操作是很耗时的，所以需要让尽可能少的文件被Loader处理